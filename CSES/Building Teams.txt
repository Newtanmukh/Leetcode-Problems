#include <bits/stdc++.h>
using namespace std;

vector<int>city[100001];
vector<bool>visited(100001,false);
vector<bool>visited2(100001,false);

vector<pair<int,int>> pairs;
map<int,int>mapper;
bool ans=false;

void checkdfs(int x)
{
  

  visited2[x]=true;
  
  for(int i=0;i<city[x].size();i++)
    {
      if(mapper[x]==mapper[city[x][i]])
      {
        ans=true;
        return;
      }

      if(visited2[city[x][i]]==false)
      {
        checkdfs(city[x][i]);
      }
    }
  
  
}

void dfs(int x,int y)
{
  
 
  
  visited[x]=true;
 y=y%2;
  pairs.push_back(make_pair(x,y));
  
  
  for(int i=0;i<city[x].size();i++)
    {
      if(visited[city[x][i]]==false)
      {
        dfs(city[x][i],y+1);
      }
    }
  
  
}

int main()
{
  int n,m;
  int x,y;
  cin>>n>>m;
  while(m--)
    {
      cin>>x>>y;
      city[x].push_back(y);
      city[y].push_back(x);
    }

  
  for(int i=1;i<n+1;i++)
    {
      if(visited[i]==false)
      {
        dfs(i,0);
        
      }
    }

  for(auto x:pairs)
    mapper[x.first]=x.second;

  for(int i=1;i<n+1;i++)
    {
      if(visited2[i]==false)
      {
       checkdfs(i); 
      }
    }

  if(ans==true)
  {
    cout<<"IMPOSSIBLE"<<endl;
    return 0;
  }
  
  sort(pairs.begin(),pairs.end());
  for(auto x:pairs)
    cout<<x.second+1<<" ";
  
  }