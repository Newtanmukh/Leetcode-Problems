//RECURSIVE SOLUTION

class Solution {
public:
    vector<int> vec;
    bool validate(TreeNode* root,long long int min,long long int max)
    {
        if(!root)
            return true;
  
        return root->val>min && max >root->val && validate(root->left,min,root->val) && validate(root->right,root->val,max);
        
    }
    bool isValidBST(TreeNode* root) {
        if(!root->left && !root->right)
            return true;
        
        long long min=-99999999999999,max=9999999999999999;
        
        return validate(root,min,max);
  
    }
};

















class Solution {
public:
    vector<int> vec;
    void inorder(TreeNode* root)
    {if(!root)
        return;
     
     inorder(root->left);
     vec.push_back(root->val);
     inorder(root->right);
        
    }
    bool isValidBST(TreeNode* root) {
        
        
        if(!root)
            return true;
        
        if(!root->left && !root->right)
            return true;
        inorder(root);
       
    int i;
        for(i=1;i<vec.size();i++)
        {
            if(vec[i-1]>=vec[i])
                return false;
        }
        return true;
       
        
   
        
    }
};