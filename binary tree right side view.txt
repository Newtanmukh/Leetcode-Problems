class Solution {
public:

    
   
    
    vector<int> rightSideView(TreeNode* root) {
    
   vector<vector<int>>ans;
        vector<int>p;
        if(!root)
            return p;
        
        queue<TreeNode*>q;
        q.push(root);
        
        while(!q.empty())
        {
            int size=q.size();
            vector<int>level;
            for(int i=0;i<size;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                
                if(node->left)
                q.push(node->left);
                if(node->right)
                    q.push(node->right);
                
                level.push_back(node->val);
            }
            ans.push_back(level);
        }
        
   
        
        for(auto vec:ans)
        {
            p.push_back(vec[vec.size()-1]);
        }
        return p;
        
        
    }
};




OPTIMIZED SOLUTION ---

class Solution {
public:

    
   
    
    vector<int> rightSideView(TreeNode* root) {
    
   vector<vector<int>>ans;
        vector<int>p;
        if(!root)
            return p;
        
        queue<TreeNode*>q;
        q.push(root);
        vector<int>level;
        TreeNode* node;
        while(!q.empty())
        {
            int size=q.size();
            
            for(int i=0;i<size;i++)
            {
                node=q.front();
                q.pop();
                
                if(node->left)
                q.push(node->left);
                if(node->right)
                    q.push(node->right);
                
                
            }
            level.push_back(node->val);// since this node will be the last accessed node in a particular level.
        }
        
   
        
        
        return level;
        
        
    }
};