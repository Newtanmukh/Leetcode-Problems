SET :

insert element : s.insert(k)
delete element : s.erase(k)
check if the element exists : myset.find(k) != myset.end()
element does not exist : myset.find(k) == myset.end()


MAP :

insert element : map[key]=value 	OR 	map.insert(make_pair(key,value))
check if key exists : mapper.count(key)
delete kay and value pair : mapper.erase(key)
check the number of key value mappings : map.size()


VECTOR :
initialize a 1D vector : vector<int> vec(n,0)    =   this will create a 1 D vector of size n and will initialzie all the values with 0.
initialize a 2D vector : vector<int> vec(m,vector<int>(n,0))     =      this will create a 2 D vector of size m by n, m rows with each row containing n values. each value being initialized to 0.
vec.clear()      = 	free the vector.


STACK :
stack.push() : will put an element to the end.
stack.pop() : will pop the element from the top
stack . top() : will return the topmost element.


POWER OF 2:

if a number x is power of 2, x&(x-1)=0.


FIND THE NUMBER OF ONE BITS OF A NUMBER 'n' :

Log(n) time.
unsigned int countSetBits(int n)
    {
        unsigned int count = 0;
        while (n) {
            n &= (n - 1);
            count++;
        }
        return count;
    }


unsigned int countSetBits(unsigned int n)
{
	unsigned int count = 0;
	while (n) {
		count = count + n & 1;
		n = n >> 1;
	}
	return count;
}



PRINT DIVISORS :

void printDivisors(int n)
{
    // Note that this loop runs till square root
    for (int i=1; i<=sqrt(n); i++)
    {
        if (n%i == 0)
        {
            // If divisors are equal, print only one
            if (n/i == i)
                cout <<" "<< i;
 
            else // Otherwise print both
                cout << " "<< i << " " << n/i;
        }
    }
}
