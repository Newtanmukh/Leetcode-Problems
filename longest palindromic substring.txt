class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
        if(n==1)
            return s;
	    string res;
        //considering all the palindromic substring with length 1.
        int dp[n][n];
        for(int i=0,j=0;i<n;i++,j++){
            dp[i][j]=1;
        }
        //considering all the palindromic substring with length 2.
        for(int i=0,j=1;j<n;i++,j++){
            if(s[i]==s[j]){
                dp[i][j]=1;
            }
        }
        //considering all the palindromic substing with length 3 to n.
        for(int i=2;i<n;i++){
            for(int j=0,k=i;k<n;j++,k++){
                if(s[j]==s[k]){
                    if(dp[j+1][k-1]==1){
                        dp[j][k]=1;
                    }
                }
            }
        }
        //finding where is the largest palindromic sub-string is.
        bool flag=false;
        for(int i=n-1;i>=0;i--){
            for(int j=0,k=i;k<n;j++,k++){
                if(dp[j][k]==1){
                    flag=true;
                    res=s.substr(j,k-j+1);
                    break;
                }
            }
            if(flag)
                break;
        }
        return res;
    }
};  