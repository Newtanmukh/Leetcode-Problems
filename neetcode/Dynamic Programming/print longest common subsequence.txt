 int longestCommonSubsequence(string s, string t) {
        int m=s.size();
        int n=t.size();
        
        int dp[m+1][n+1];
        
        for(int i=0;i<m+1;i++)
            for(int j=0;j<n+1;j++)
            {
                if(i==0||j==0)
                    dp[i][j]=0;
                else if(s[i-1]==t[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        
        string ret="";
        int i=s.size();
        int j=t.size();
        
        while(i>0 && j>0)
        {
            if(s[i-1]==t[j-1])
            {
                ret=ret+s[i-1];
                i--;
                j--;
            }
            else if(dp[i-1][j]>dp[i][j-1])
            {
                i--;
            }
            else
            {
                j--;
            }
        }
        reverse(ret.begin(),ret.end());
        cout<<ret<<endl;
        return dp[m][n];
        
    }