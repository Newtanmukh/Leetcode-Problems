  bool bipartite(int node,vector<bool>&visited,vector<int>&color,vector<int>adj[])
    {
        queue<int>q;
        q.push(node);
        visited[node]=true;
        color[node]=0;
        
        while(!q.empty())
        {
            int front=q.front();
            q.pop();
            
            for(int neighbour:adj[front])
            {
                if(visited[neighbour]==false)
                {
                    visited[neighbour]=true;
                    color[neighbour]=1-color[front];
                    q.push(neighbour);
                }
                
                if(color[neighbour]==color[front])
                return false;
            }
        }
        return true;
    }
    
    
	bool isBipartite(int V, vector<int>adj[]){
	   vector<int>color(V,-1);
	   vector<bool>visited(V,false);
	   
	   for(int i=0;i<V;i++)
	   {
	       if(visited[i]==false)
	       {
	       if(bipartite(i,visited,color,adj)==false)
	       {
	           return false;
	       }
	           
	       }
	   }
	   
	   return true;
	}