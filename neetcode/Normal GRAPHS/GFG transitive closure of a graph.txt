 void bfs(int node,vector<int>&ans,vector<int>adj[],int V)
    {
        
        vector<bool>visited(V,false);
        
        queue<int>q;
        q.push(node);
        visited[node]=true;
        
        while(!q.empty())
        {
            int x=q.front();
            q.pop();
            
            for(int neighbour:adj[x])
            {
                if(visited[neighbour]==false)
                {
                    visited[neighbour]=true;
                    q.push(neighbour);
                }
            }
            
        }
        
        for(int i=0;i<V;i++)
        {
            if(visited[i]==false)
            {
                ans.push_back(0);
            }
            else
            {
                ans.push_back(1);
            }
        }
        //return ans;
        
    }
    
    vector<vector<int>> transitiveClosure(int N, vector<vector<int>> g)
    {
        
       int row=g.size();
       vector<int>adj[row];
       int V=N;
       int col=g[0].size();
       for(int i=0;i<row;i++)
        for(int j=0;j<col;j++)
            {
                if(g[i][j]==1)
                adj[i].push_back(j);
            }
            
            
        vector<vector<int>>p;
        
        for(int i=0;i<V;i++)
        {
            vector<int>ans;
            bfs(i,ans,adj,V);
            p.push_back(ans);    
        }
        
        return p;
        
    }