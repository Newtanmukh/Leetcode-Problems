vector<int>topo;
    
    int c=0;
    void topological_sort(int node,vector<bool>&visited,vector<int>adj[])
    {
        visited[node]=true;
        
        for(int u:adj[node])
        {
            if(visited[u]==false)
            {
                topological_sort(u,visited,adj);
            }
        }
        
        topo.push_back(node);
        
    }
    
    void dfs(int node,vector<bool>&visited,vector<int>adj[])
    {
        visited[node]=true;
        c++;
        for(int u:adj[node])
        {
            if(visited[u]==false)
            {
                dfs(u,visited,adj);
            }
        }
        
    }
    
    int findMotherVertex(int V, vector<int>adj[])
    {
        
        vector<bool>visited(V,false);
        
        for(int i=0;i<V;i++)
        {
            if(visited[i]==false)
            {
                topological_sort(i,visited,adj);
            }
        }
        
        
        for(int i=0;i<V;i++)
        {
            visited[i]=false;
        }
        
        int mother=topo[topo.size()-1];
        
        dfs(mother,visited,adj);
        
        if(c==V)
        return mother;
        
        return -1;
     
    }