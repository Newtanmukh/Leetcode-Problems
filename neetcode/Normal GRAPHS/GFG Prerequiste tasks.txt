bool cycle(int node,vector<bool>&visited,vector<bool>&stack,vector<int>adj[])
    {
        visited[node]=true;
        stack[node]=true;
        
        for(int neighbour:adj[node])
        {
            if(visited[neighbour]==false)
            {
                if(cycle(neighbour,visited,stack,adj))
                return true;
            }
            else if(stack[neighbour]==true)
            {
                return true;
            }
        }
        
        stack[node]=false;
        return false;
    }
    
	bool isPossible(int V, vector<pair<int, int> >& prerequisites) 
	{
	   vector<bool>visited(V,false);
	   vector<bool>stack(V,false);
	   vector<int>adj[V];
	   
	   for(auto edge:prerequisites)
	   {
	       adj[edge.first].push_back(edge.second);
	   }
	   
	   for(int i=0;i<V;i++)
	   {
	       if(visited[i]==false)
	       {
	           if(cycle(i,visited,stack,adj))
	           return false;//if cycle is present,then it means that it is NOT possible. so return false;
	       }
	   }
	   
	   return true;//if cycle is NOT present , then it means that it is indeed possible.
	   
	}