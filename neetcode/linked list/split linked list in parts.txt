class Solution {
public:
    
    ListNode* sendList(ListNode* head,int x)
    {
        if(x==0)
            return head;
        
        ListNode* send=new ListNode();
        ListNode* ret=send;
        
        while(x--)
        {   
            send->val=head->val;
            if(x>0)  //this was necessary because, apart from the required nodes in each list, we were getting an additional node with value '0' in the end as well. so,thats why.
            { 
            send->next = new ListNode();
            send =send->next;
            }
            head=head->next;
        }
        
       
        return ret;
        
    }
    
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        
        vector<ListNode*> p(k,head);
        
        if(head==NULL||k==1)
        return p;
        
      //  if(head==NULL)
        //    return p;
        
        int count=0;
        ListNode* traverse=head;
        
        while(traverse)
        {
            count++;
            traverse=traverse->next;
        }
        
        int PartSize=count/k;
        
        vector<int>area(k,0);
        
        for(int i=0;i<k;i++)
        {
            area[i]=PartSize;
        }
        
        int remain=count%k;
        
        if(remain>0)
        {
            for(int i=0;i<remain;i++)
            {
                area[i]++;
            }
        }
        
        
        
        for(int i=0;i<k;i++)
        {
            
            p[i]=sendList(head,area[i]);
            //cout<<area[i]<<endl;
            while(area[i]--)
            {head=head->next;}
            
        }
        
       return p;
        
    }
};